services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: cinemaabyss-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: cinemaabyss
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinemaabyss-network

  # ZooKeeper for Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: cinemaabyss-zookeeper
    ports:
      - "2182:2181"
    networks:
      - cinemaabyss-network

  # Kafka
  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: cinemaabyss-kafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_NAME: PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cinemaabyss-network
    # Проверяем, что Kafka готов к работе
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 15

  # Monolith Service
  monolith:
    build:
      context: ./src/monolith
      dockerfile: Dockerfile
    container_name: cinemaabyss-monolith
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8085:8080"  # Изменено на 8085, чтобы избежать конфликта с другими сервисами
    environment:
      PORT: 8080
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  # Movies Microservice
  movies-service:
    build:
      context: ./src/microservices/movies
      dockerfile: Dockerfile
    container_name: cinemaabyss-movies-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  # Events Microservice
  events-service:
    build:
      context: ./src/microservices/events
      dockerfile: Dockerfile
    container_name: cinemaabyss-events-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      KAFKA_BROKERS: kafka:9092
    networks:
      - cinemaabyss-network

  # Proxy Service (API Gateway)
  proxy-service:
    build:
      context: ./src/microservices/proxy
      dockerfile: Dockerfile
    container_name: cinemaabyss-proxy-service
    depends_on:
      - monolith
      - movies-service
      - events-service
    ports:
      - "8000:8000"
    environment:
      PORT: 8000
      MONOLITH_URL: http://monolith:8080
      MOVIES_SERVICE_URL: http://movies-service:8081
      EVENTS_SERVICE_URL: http://events-service:8082
      GRADUAL_MIGRATION: "true"
      MOVIES_MIGRATION_PERCENT: "50"
    networks:
      - cinemaabyss-network

  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cinemaabyss-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cinemaabyss
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cinemaabyss-network

# Объявляем том для PostgreSQL
volumes:
  postgres-data:

# Объявляем сеть с фиксированным именем
networks:
  cinemaabyss-network:
    name: cinemaabyss-network
    driver: bridge